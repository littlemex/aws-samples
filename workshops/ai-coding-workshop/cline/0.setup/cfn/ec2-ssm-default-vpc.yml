AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with SSM access and VS Code Server setup (using default VPC)

Parameters:
  # 識別子関連
  UserName:
    Type: String
    Description: User name to prevent resource naming conflicts (max 20 characters)
    AllowedPattern: "[a-zA-Z0-9-]{1,20}"
    ConstraintDescription: Must contain only alphanumeric characters and hyphens (max 20 characters)

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, stg, prod]
    Description: Environment name (dev/stg/prod)

  # インスタンス設定関連
  InstanceType:
    Type: String
    Default: m5.large
    Description: EC2 instance type

  Region:
    Type: String
    Default: us-east-1
    Description: AWS Region

  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-084568db4383264d4
    Description: Ubuntu Server 22.04 LTS (HVM),EBS General Purpose (SSD) Volume Type. Support available from Canonical (http://www.ubuntu.com/cloud/services).

  EbsVolumeSize:
    Type: Number
    Default: 30
    Description: Size of EBS volume in GB
    MinValue: 8
    MaxValue: 16384

Resources:
  DefaultVPCSubnet:
    Type: Custom::DefaultVPCSubnet
    Properties:
      ServiceToken: !GetAtt DefaultVPCSubnetFunction.Arn
      Region: !Ref Region

  DefaultVPCSubnetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt DefaultVPCSubnetFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      ec2 = boto3.client('ec2')
                      # デフォルトVPCを取得
                      vpcs = ec2.describe_vpcs(Filters=[{'Name': 'isDefault', 'Values': ['true']}])
                      if not vpcs['Vpcs']:
                          raise Exception('Default VPC not found')
                      vpc_id = vpcs['Vpcs'][0]['VpcId']
                      
                      # デフォルトVPCのパブリックサブネットを取得
                      subnets = ec2.describe_subnets(
                          Filters=[
                              {'Name': 'vpc-id', 'Values': [vpc_id]},
                              {'Name': 'map-public-ip-on-launch', 'Values': ['true']}
                          ]
                      )
                      if not subnets['Subnets']:
                          raise Exception('No public subnet found in default VPC')
                      
                      # 最初のパブリックサブネットを使用
                      subnet_id = subnets['Subnets'][0]['SubnetId']
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'SubnetId': subnet_id,
                          'VpcId': vpc_id
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

      Runtime: python3.9
      Timeout: 30

  DefaultVPCSubnetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2DescribeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                Resource: '*'

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt DefaultVPCSubnet.VpcId
      GroupDescription: Security group for EC2 instance
      SecurityGroupIngress: []  # インバウンドルールを全て削除（Session Manager経由でアクセス）
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - [!Ref UserName, !Ref Environment, 'sg']

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - [!Ref UserName, !Ref Environment, 'ec2-role']
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Join
            - '-'
            - [!Ref UserName, !Ref Environment, 'ssm-policy']
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub arn:aws:bedrock:*::foundation-model/anthropic.claude-3-*
                  - !Sub arn:aws:bedrock:*::foundation-model/anthropic.claude-3-5-sonnet-*
                  - !Sub arn:aws:bedrock:*::foundation-model/anthropic.claude-3-7-sonnet-*
                  - !Sub arn:aws:bedrock:*::foundation-model/amazon.nova-*
                  - !Sub arn:aws:bedrock:*::foundation-model/deepseek.r1-*
                  - !Sub arn:aws:bedrock:*:*:inference-profile/*

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join
        - '-'
        - [!Ref UserName, !Ref Environment, 'instance-profile']
      Roles:
        - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId: !GetAtt DefaultVPCSubnet.SubnetId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -e

            # Update package list
            apt-get update

            # Install basic utilities
            apt-get install -y \
                curl \
                wget \
                unzip \
                htop \
                jq \
                ca-certificates

            echo "apt-get install done."

            # Install VS Code via snap
            snap install --classic code

            # Create code-server user
            adduser --disabled-password --gecos "" coder
            echo "coder ALL=(ALL:ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/coder
            usermod -aG sudo coder

            # Create VS Code Server service file
            cat > /etc/systemd/system/vscode-server.service << 'EOF'
            [Unit]
            Description=VSCode Server Service
            After=network.target snapd.service

            [Service]
            Type=simple
            User=coder
            Group=coder
            Environment="HOME=/home/coder"
            Environment="SHELL=/bin/bash"
            Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
            WorkingDirectory=/home/coder

            # シンプルな再起動設定
            Restart=always
            RestartSec=10

            # VS Code Server の起動コマンド（フォアグラウンドで実行）
            ExecStart=/snap/bin/code serve-web --without-connection-token --accept-server-license-terms --host 0.0.0.0 --port 8080

            [Install]
            WantedBy=multi-user.target
            EOF

            # Create necessary directories
            mkdir -p /home/coder/.config
            chown -R coder:coder /home/coder/.config

            # Start and enable VS Code Server service
            systemctl daemon-reload
            systemctl enable vscode-server
            systemctl start vscode-server

            # install aws cli, see: https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

            # install docker
            apt-get remove -y docker docker-engine docker.io containerd runc || true
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            usermod -aG docker coder
            echo '
            if ! grep -q docker <(groups); then
              newgrp docker
            fi
            ' >> /home/coder/.bashrc

            # install mise, see: https://mise.jdx.dev/getting-started.html
            apt update -y && apt install -y gpg sudo wget curl
            wget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null
            echo "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=amd64] https://mise.jdx.dev/deb stable main" | tee /etc/apt/sources.list.d/mise.list
            apt update
            apt install -y mise

            # install uv
            su - coder -c 'echo "eval \"\$(/usr/bin/mise activate bash)\"" >> ~/.bashrc'
            su - coder -c "/usr/bin/mise install uv@0.6.16 python@3.10 node@22"
            su - coder -c "/usr/bin/mise use -g uv@0.6.16 python@3.10 node@22"

            echo "Configuration complete" 
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - [!Ref UserName, !Ref Environment, 'instance']

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance

  Prerequisites:
    Description: Required prerequisites
    Value: |
      1. Install AWS CLI
      2. Install Session Manager plugin (https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html)

  PortForwardCommand:
    Description: Command to forward port 8080 to local port 18080
    Value: !Join
      - ''
      - - 'aws ssm start-session'
        - '  --target '
        - !Ref EC2Instance
        - ''
        - '  --region '
        - !Ref Region
        - ''
        - '  --document-name AWS-StartPortForwardingSession'
        - '  --parameters ''{"portNumber":["8080"],"localPortNumber":["18080"]}'''

  AccessURL:
    Description: URL to access after port forwarding
    Value: "After running the port forward command, access: http://localhost:18080"

  Configuration:
    Description: Stack configuration details
    Value: !Join
      - ''
      - - !Join
          - ''
          - - 'Stack Name: '
            - !Join
              - '-'
              - [!Ref UserName, !Ref Environment]
            - '\nRegion: '
            - !Ref Region
            - '\nInstance Type: '
            - !Ref InstanceType
            - '\nAMI ID: '
            - !Ref AmiId
            - '\nEBS Volume Size: '
            - !Ref EbsVolumeSize
            - ' GB'
