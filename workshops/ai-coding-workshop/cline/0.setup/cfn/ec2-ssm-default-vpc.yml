AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with SSM access and VS Code Server setup (using default VPC)

Parameters:
  # 識別子関連
  UserName:
    Type: String
    Description: User name to prevent resource naming conflicts (max 20 characters)
    AllowedPattern: "[a-zA-Z0-9-]{1,20}"
    ConstraintDescription: Must contain only alphanumeric characters and hyphens (max 20 characters)

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, stg, prod]
    Description: Environment name (dev/stg/prod)

  # インスタンス設定関連
  InstanceType:
    Type: String
    Default: m5.large
    Description: EC2 instance type

  Region:
    Type: String
    Default: us-east-1
    Description: AWS Region

  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-084568db4383264d4
    Description: Ubuntu Server 22.04 LTS (HVM),EBS General Purpose (SSD) Volume Type. Support available from Canonical (http://www.ubuntu.com/cloud/services).

  EbsVolumeSize:
    Type: Number
    Default: 30
    Description: Size of EBS volume in GB
    MinValue: 8
    MaxValue: 16384

Resources:
  DefaultVPCSubnet:
    Type: Custom::DefaultVPCSubnet
    Properties:
      ServiceToken: !GetAtt DefaultVPCSubnetFunction.Arn
      Region: !Ref Region

  DefaultVPCSubnetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt DefaultVPCSubnetFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      ec2 = boto3.client('ec2')
                      # デフォルトVPCを取得
                      vpcs = ec2.describe_vpcs(Filters=[{'Name': 'isDefault', 'Values': ['true']}])
                      if not vpcs['Vpcs']:
                          raise Exception('Default VPC not found')
                      vpc_id = vpcs['Vpcs'][0]['VpcId']
                      
                      # デフォルトVPCのパブリックサブネットを取得
                      subnets = ec2.describe_subnets(
                          Filters=[
                              {'Name': 'vpc-id', 'Values': [vpc_id]},
                              {'Name': 'map-public-ip-on-launch', 'Values': ['true']}
                          ]
                      )
                      if not subnets['Subnets']:
                          raise Exception('No public subnet found in default VPC')
                      
                      # 最初のパブリックサブネットを使用
                      subnet_id = subnets['Subnets'][0]['SubnetId']
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'SubnetId': subnet_id,
                          'VpcId': vpc_id
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

      Runtime: python3.9
      Timeout: 30

  DefaultVPCSubnetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2DescribeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                Resource: '*'

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt DefaultVPCSubnet.VpcId
      GroupDescription: Security group for EC2 instance
      SecurityGroupIngress: []  # インバウンドルールを全て削除（Session Manager経由でアクセス）
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - [!Ref UserName, !Ref Environment, 'sg']

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - [!Ref UserName, !Ref Environment, 'ec2-role']
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Join
            - '-'
            - [!Ref UserName, !Ref Environment, 'ssm-policy']
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub arn:aws:bedrock:*::foundation-model/anthropic.claude-3-*
                  - !Sub arn:aws:bedrock:*::foundation-model/anthropic.claude-3-5-sonnet-*
                  - !Sub arn:aws:bedrock:*::foundation-model/anthropic.claude-3-7-sonnet-*
                  - !Sub arn:aws:bedrock:*::foundation-model/amazon.nova-*
                  - !Sub arn:aws:bedrock:*::foundation-model/deepseek.r1-*
                  - !Sub arn:aws:bedrock:*:*:inference-profile/*

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join
        - '-'
        - [!Ref UserName, !Ref Environment, 'instance-profile']
      Roles:
        - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId: !GetAtt DefaultVPCSubnet.SubnetId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash

            # エラーと成功のログを記録する関数
            log_error() {
              echo "ERROR: $(date): $1" | tee -a /var/log/user-data-error.log
            }

            log_success() {
              echo "SUCCESS: $(date): $1" | tee -a /var/log/user-data-success.log
            }

            # apt-getのロックが解放されるまで待機する関数
            wait_for_apt_lock() {
              log_success "apt-getのロックをチェックしています..."
              local _start_time="$(date +%s)"
              local _timeout_seconds="600"  # 10分のタイムアウト

              while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 || sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
                local _current_time="$(date +%s)"
                local _time_diff="$(( _current_time - _start_time ))"

                if [ "$_time_diff" -ge "$_timeout_seconds" ]; then
                  log_error "apt-getのロックが$_timeout_seconds秒以上解放されませんでした。インストールを中止します。"
                  exit 1
                fi

                local _remaining="$(( _timeout_seconds - _time_diff ))"
                log_success "apt-getのロックが検出されました。解放されるまで待機します（10秒ごとに再試行、残り$_remaining秒）"
                sleep 10
              done
              log_success "apt-getのロックは検出されませんでした。インストールを続行します"
            }

            # コマンド実行を再試行する関数
            retry_command() {
              local cmd="$1"
              local max_attempts=3
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "試行 $attempt/$max_attempts: $cmd"
                if eval "$cmd"; then
                  log_success "コマンド成功: $cmd"
                  return 0
                else
                  log_error "コマンド失敗 (試行 $attempt): $cmd"
                  attempt=$((attempt + 1))
                  sleep 5
                fi
              done
              
              log_error "コマンドは $max_attempts 回の試行後も失敗しました: $cmd"
              return 1
            }

            log_success  "インストールプロセスを開始します: $(date)"

            # Update package list
            wait_for_apt_lock
            retry_command "apt-get update"

            # Install basic utilities
            wait_for_apt_lock
            retry_command "apt-get install -y curl wget unzip htop jq ca-certificates"

            log_success "基本ユーティリティのインストールが完了しました"

            # Install VS Code via snap
            retry_command "snap install --classic code"

            # Create VS Code Server user
            retry_command "adduser --disabled-password --gecos \"\" coder"
            echo "coder ALL=(ALL:ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/coder
            retry_command "usermod -aG sudo coder"

            log_success "VS Codeとcoderユーザーの設定が完了しました"

            # Create VS Code Server service file
            cat > /etc/systemd/system/vscode-server.service << 'EOF'
            [Unit]
            Description=VS Code Server Service
            After=network.target snapd.service

            [Service]
            Type=simple
            User=coder
            Group=coder
            Environment="HOME=/home/coder"
            Environment="SHELL=/bin/bash"
            Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
            WorkingDirectory=/home/coder

            # シンプルな再起動設定
            Restart=always
            RestartSec=10

            # VS Code Server の起動コマンド（フォアグラウンドで実行）
            ExecStart=/snap/bin/code serve-web --without-connection-token --accept-server-license-terms --host 0.0.0.0 --port 8080

            [Install]
            WantedBy=multi-user.target
            EOF

            # Create necessary directories
            mkdir -p /home/coder/.config
            chown -R coder:coder /home/coder/.config

            # Start and enable VS Code Server service
            retry_command "systemctl daemon-reload"
            retry_command "systemctl enable vscode-server"
            retry_command "systemctl start vscode-server"

            # サービスの状態を確認
            sleep 5  # サービスの起動を待機
            if ! systemctl is-active --quiet vscode-server; then
              log_error "VS Codeサーバーが起動していません"
              systemctl status vscode-server
              log_error "サービスの再起動を試みます"
              retry_command "systemctl restart vscode-server"
              sleep 5
              if ! systemctl is-active --quiet vscode-server; then
                log_error "VS Codeサーバーの起動に失敗しました"
              else
                log_success "VS Codeサーバーが正常に起動しました"
              fi
            else
              log_success "VS Codeサーバーが正常に起動しました"
            fi

            # install aws cli, see: https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

            # Docker インストール
            log_success "Dockerのインストールを開始します..."
            
            # 古いバージョンの削除
            wait_for_apt_lock
            retry_command "apt-get remove -y docker.io || true"

            # 必要なパッケージをインストール
            wait_for_apt_lock
            retry_command "apt-get update"
            wait_for_apt_lock
            retry_command "apt-get install -y ca-certificates curl gnupg"

            # Docker の公式GPGキーを追加（--yes オプション使用）
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
            log_success "Dockerの公式GPGキーを追加しました"

            # Docker のリポジトリを追加
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            log_success "Dockerのリポジトリを追加しました"

            # パッケージリストの更新とDockerのインストール
            wait_for_apt_lock
            retry_command "apt-get update"
            wait_for_apt_lock
            retry_command "apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
            retry_command "usermod -aG docker coder"

            log_success "Dockerのインストールが完了しました"

            # .bashrc に Docker グループの設定を追加（正しいインデントで）
            cat > /tmp/docker_bashrc << EOF
            if ! grep -q docker <(groups); then
              newgrp docker
            fi
            EOF
            cat /tmp/docker_bashrc >> /home/coder/.bashrc
            rm /tmp/docker_bashrc
            log_success "Docker グループの設定を追加しました"

            # mise のインストール
            log_success "miseのインストールを開始します..."
            wait_for_apt_lock
            retry_command "apt update -y && apt install -y gpg sudo wget curl"
            retry_command "wget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --yes --dearmor -o /etc/apt/keyrings/mise-archive-keyring.gpg"
            echo "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=amd64] https://mise.jdx.dev/deb stable main" | tee /etc/apt/sources.list.d/mise.list
            wait_for_apt_lock
            retry_command "apt update"
            wait_for_apt_lock
            retry_command "apt install -y mise"

            # coder ユーザーの .bashrc に mise の設定を追加
            su - coder -c 'echo "eval \"\$(/usr/bin/mise activate bash)\"" >> ~/.bashrc'

            # mise のインストールを確実に行うための追加処理
            echo "mise の設定を構成しています..."
            su - coder -c 'mkdir -p ~/.config/mise'
            su - coder -c 'cat > ~/.config/mise/config.toml << EOF
            [tools]
            uv = "0.6.16"
            python = "3.10"
            node = "22"

            [settings]
            python.uv_venv_auto = true
            EOF'

            # mise install コマンドを実行
            log_success "miseでツールをインストールしています..."
            retry_command "su - coder -c 'bash -l -c \"/usr/bin/mise install\"'"

            # グローバル設定の適用
            retry_command "su - coder -c 'bash -l -c \"/usr/bin/mise use -g node@22 python@3.10 uv@0.6.16\"'"

            # インストール確認
            log_success "インストールされたツールを確認しています..."
            su - coder -c 'bash -l -c "/usr/bin/mise ls"'

            # PATH を確認
            log_success "mise の PATH 設定を確認しています..."
            su - coder -c 'bash -l -c "echo \$PATH"'

            # シンボリックリンクの作成（オプション）
            log_success "シンボリックリンクを作成しています..."
            su - coder -c 'mkdir -p ~/.local/bin'
            su - coder -c 'ln -sf ~/.local/share/mise/shims/uv ~/.local/bin/uv'
            su - coder -c 'ln -sf ~/.local/share/mise/shims/python ~/.local/bin/python'
            su - coder -c 'ln -sf ~/.local/share/mise/shims/node ~/.local/bin/node'

            # 最終確認とログ出力
            log_success "===== インストール完了 ====="
            log_success "インストールプロセスが完了しました"
            log_success "新しいシェルを開くか、以下のコマンドを実行して環境を更新してください："
            log_success "source ~/.bashrc"

            # 最終的なサービス状態の確認
            log_success "最終的なサービス状態の確認を開始します"
            systemctl status vscode-server | tee -a /var/log/user-data-final.log
            netstat -tuln | grep 8080 | tee -a /var/log/user-data-final.log
            log_success "最終的なサービス状態の確認が完了しました"
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - [!Ref UserName, !Ref Environment, 'instance']

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance

  Prerequisites:
    Description: Required prerequisites
    Value: |
      1. Install AWS CLI
      2. Install Session Manager plugin (https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html)

  PortForwardCommand:
    Description: Command to forward port 8080 to local port 18080
    Value: !Join
      - ''
      - - 'aws ssm start-session'
        - '  --target '
        - !Ref EC2Instance
        - ''
        - '  --region '
        - !Ref Region
        - ''
        - '  --document-name AWS-StartPortForwardingSession'
        - '  --parameters ''{"portNumber":["8080"],"localPortNumber":["18080"]}'''

  AccessURL:
    Description: URL to access after port forwarding
    Value: "After running the port forward command, access: http://localhost:18080"

  Configuration:
    Description: Stack configuration details
    Value: !Join
      - ''
      - - !Join
          - ''
          - - 'Stack Name: '
            - !Join
              - '-'
              - [!Ref UserName, !Ref Environment]
            - '\nRegion: '
            - !Ref Region
            - '\nInstance Type: '
            - !Ref InstanceType
            - '\nAMI ID: '
            - !Ref AmiId
            - '\nEBS Volume Size: '
            - !Ref EbsVolumeSize
            - ' GB'
